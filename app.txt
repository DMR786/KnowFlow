from flask import Flask, render_template, request
from flask_mail import Mail, Message
from flask_caching import Cache

import requests

app = Flask(__name__)
app.config['MAIL_SERVER'] = 'smtp.gmail.com'
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = 'dmrathod2018@gmail.com'  # Replace with your email
app.config['MAIL_PASSWORD'] = 'nkva rblx eiic abat'          # Replace with your email password
app.config['MAIL_DEFAULT_SENDER'] = 'dmrathod2018@gmail.com'  # Replace with your email
mail = Mail(app)

cache = Cache(app, config={'CACHE_TYPE': 'simple'})

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/search', methods=['POST'])
# def search():
#     query = request.form['query']
#     stackoverflow_results = fetch_stackoverflow_results(query)
#     reddit_results = fetch_reddit_results(query)
#     return render_template('results.html', query=query, stackoverflow=stackoverflow_results, reddit=reddit_results)
def search():
    query = request.form['query']
    recipient_email = request.form.get('email')  # Get the email from the form
    stackoverflow_results = fetch_stackoverflow_results(query)
    reddit_results = fetch_reddit_results(query)

    # Prepare email body
    email_body = f"Results for '{query}'\n\n"
    email_body += "Stack Overflow Results:\n"
    for result in stackoverflow_results:
        email_body += f"{result['title']} - {result['link']}\n"
    
    email_body += "\nReddit Results:\n"
    for result in reddit_results:
        # Ensure 'data' exists before trying to access it
        if 'data' in result:
            email_body += f"{result['data']['title']} - https://reddit.com{result['data']['permalink']}\n"
        else:
            email_body += "No valid data available for this Reddit result.\n"

    # Send email if an address is provided
    if recipient_email:
        send_email("Knowledge Base Search Results", recipient_email, email_body)

    return render_template('results.html', query=query, stackoverflow=stackoverflow_results, reddit=reddit_results)





@cache.cached(timeout=300, query_string=True)
def fetch_stackoverflow_results(query):
    url = f"https://api.stackexchange.com/2.3/search?order=desc&sort=activity&intitle={query}&site=stackoverflow"
    response = requests.get(url)
    return response.json()['items'][:5]  # Top 5 results

@cache.cached(timeout=300, query_string=True)
# def fetch_reddit_results(query):
#     headers = {'User-agent': 'KnowledgeApp'}
#     url = f"https://www.reddit.com/search.json?q={query}"
#     url = "http://www.reddit.com/search.json?q={query}?jsonp=?"
#     response = requests.get(url, headers=headers)
#     return response.json()['data']['children'][:5]  # Top 5 results
def fetch_reddit_results(query):
    url = f"https://www.reddit.com/search.json?q={query}"
    headers = {'User-agent': 'Mozilla/5.0'}
    
    try:
        response = requests.get(url, headers=headers)
        results = response.json().get('data', {}).get('children', [])

        reddit_results = []
        for result in results:
            # Safely check if 'data' key exists in the result
            if 'data' in result:
                post_data = result['data']
                reddit_results.append({
                    'title': post_data.get('title', 'No Title'),
                    'permalink': post_data.get('permalink', ''),
                    'url': f"https://reddit.com{post_data.get('permalink', '')}"
                })
        
        return reddit_results
    except Exception as e:
        print(f"Error fetching data from Reddit: {e}")
        return []



def send_email(subject, recipient, body):
    msg = Message(subject, recipients=[recipient])
    msg.body = body
    mail.send(msg)


if __name__ == '__main__':
    app.run(debug=True)
